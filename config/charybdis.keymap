#include "keys_de_swiss.h"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 4>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;

        // bindings = <&ib_toggle_layer 4>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <8>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        scale-divisor = <8>;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    trackball_arrow_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <2>; // Працює тільки на шарі 2
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <1>;
        bindings = <&ib_arrow_nav>; // Використовуємо наш новий behavior
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <500>;
    };

    ib_arrow_nav: ib_arrow_nav {
        compatible = "zmk,input-behavior-move-to-keypress";
        #binding-cells = <0>;
        threshold = <250>;
        x-threshold = < 200>;
        y-threshold = <300>;
        rate-limit-ms = <15>;
        reset-other-axis;
        bindings = <&kp RIGHT>, <&kp LEFT>, <&kp UP>, <&kp DOWN>;
    };

    // #define QUERTZ    0
    // #define NUMBERS   1
    // #define NAV-FUN   2
    // #define MAC       3
    // #define MAC-NUM   4
    // #define MAC-NAV   5
    // #define GAME      6
    // #define GAME-NUM  7
    // #define GAME-NAV  8
    // #define SCROLL    9
    // #define SNIPER   10
    // #define FN       11

    combos {
        compatible = "zmk,combos";

        ckp {
            bindings = <&mkp MCLK>;
            key-positions = <54 50>;
            layers = <0>;
        };
    };

    behaviors {
        homerow: homerow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp F1        &kp F2  &kp F3                   &kp F4  &kp F5                 &kp F6       &kp F7      &kp F8                  &kp F9     &kp F10           &kp F11   &kp F12
&kp ESC       &kp Q   &kp W                    &kp E   &kp R                  &kp T        &kp Y       &kp U                   &kp I      &kp O             &kp P     &kp LBKT
&kp TAB       &kp A   &homerow LEFT_CONTROL S  &kp D   &homerow LEFT_SHIFT F  &kp G        &kp H       &homerow RIGHT_SHIFT J  &kp K      &homerow RCTRL L  &kp SEMI  &kp SQT
&kp LEFT_WIN  &kp Z   &kp X                    &kp C   &kp V                  &kp B        &kp N       &kp M                   &kp COMMA  &kp DOT           &kp FSLH  &kp RIGHT_BRACKET
                                               &mo 1   &lt 2 SPACE            &mkp LCLK    &kp RET     &kp BACKSPACE
                                                       &kp LALT               &mkp RCLK    &kp DELETE
            >;
        };

        NAV {
            bindings = <
&sys_reset  &trans         &trans    &trans    &trans     &bootloader        &bootloader   &trans        &trans        &trans        &trans      &sys_reset
&trans      &kp PAGE_DOWN  &kp HOME  &kp UP    &kp END    &kp PAGE_UP        &trans        &trans        &trans        &trans        &trans      &trans
&trans      &kp C_VOL_DN   &kp LEFT  &kp DOWN  &kp RIGHT  &kp C_VOLUME_UP    &trans        &trans        &trans        &trans        &trans      &trans
&trans      &trans         &trans    &trans    &trans     &trans             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR  &sys_reset
                                     &trans    &trans     &trans             &trans        &trans
                                               &trans     &trans             &trans
            >;
        };

        SYMNUM {
            bindings = <
&kp F1            &kp F2        &kp F3        &kp F4                &kp F5                 &kp F6          &kp F7           &kp F8            &kp F9             &kp F10       &kp F11               &kp F12
&kp PRINTSCREEN   &kp MINUS     &kp PLUS      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL       &kp EXCLAMATION  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp ASTERISK  &kp AMPERSAND         &kp AT
&kp LS(LEFT_ALT)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3          &kp NUMBER_4           &kp N5          &kp NUMBER_6     &kp N7            &kp N8             &kp N9        &kp N0                &kp HASH
&kp LC(LEFT_WIN)  &bt BT_CLR    &bt BT_SEL 2  &kp SCROLLLOCK        &kp KP_NUMLOCK         &kp CAPSLOCK    &kp UNDERSCORE   &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp PERCENT   &kp NON_US_BACKSLASH  &kp DOLLAR
                                              &trans                &mo 2                  &trans          &kp ENTER        &kp BSPC
                                                                    &kp LEFT_SHIFT         &trans          &kp DEL
            >;
        };
    };
};
